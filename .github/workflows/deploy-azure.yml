name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  AZURE_RESOURCE_GROUP: rg-prompt-booster
  AZURE_CONTAINER_REGISTRY: acrpromptbooster
  CONTAINER_APP_NAME: prompt-booster
  CONTAINER_APP_ENVIRONMENT: env-prompt-booster
  IMAGE_NAME: prompt-booster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4

    - name: üîß Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üß™ Run tests
      run: npm run test --if-present

    - name: üîç Run type check
      run: npm run type-check

    - name: üßπ Run linting
      run: npm run lint

    - name: üîê Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: üöÄ Deploy to Azure Container Apps
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the latest image tag
        IMAGE_TAG=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        # Update the container app
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image $IMAGE_TAG \
          --set-env-vars \
            NODE_ENV=production \
            NEXT_TELEMETRY_DISABLED=1 \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            REDIS_URL="${{ secrets.REDIS_URL }}" \
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
            NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

    - name: üîÑ Run database migrations
      if: github.ref == 'refs/heads/main'
      run: |
        # Get ACR credentials for temporary container
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" --output tsv)
        
        # Run migrations in a temporary container
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name migration-job-$(date +%s) \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --command-line "npm run db:migrate" \
          --environment-variables \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --restart-policy Never \
          --no-wait

    - name: üìä Get deployment URL
      if: github.ref == 'refs/heads/main'
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "üéâ Application deployed successfully!"
        echo "üåê URL: https://$APP_URL"
        echo "::notice title=Deployment Success::Application is live at https://$APP_URL"

    - name: üßπ Cleanup migration container
      if: github.ref == 'refs/heads/main'
      continue-on-error: true
      run: |
        # Clean up migration containers (keep only latest 3)
        az container list \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?starts_with(name, 'migration-job-')].name" \
          --output tsv | \
        sort -r | \
        tail -n +4 | \
        xargs -I {} az container delete \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name {} \
          --yes \
          --no-wait || true
