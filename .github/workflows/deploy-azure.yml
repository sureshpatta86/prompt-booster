name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  AZURE_RESOURCE_GROUP: rg-prompt-booster
  AZURE_CONTAINER_REGISTRY: acrpromptboosterproduction
  CONTAINER_APP_NAME: prompt-booster-production
  CONTAINER_APP_ENVIRONMENT: env-prompt-booster-production
  IMAGE_NAME: prompt-booster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4

    - name: üîß Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üß™ Run tests
      run: npm run test --if-present

    - name: üîç Run type check
      run: npm run type-check

    - name: üßπ Run linting
      run: npm run lint

    - name: üîê Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: üöÄ Deploy to Azure Container Apps
      if: github.ref == 'refs/heads/main'
      run: |
        IMAGE_TAG=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        echo "üöÄ Deploying image: $IMAGE_TAG"
        
        # Check if container app exists
        if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
          echo "üì¶ Container app exists, updating..."
          
          # Update container app with new image
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image $IMAGE_TAG
          
          echo "üîß Setting environment variables..."
          # Set environment variables in a separate command
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set-env-vars \
              NODE_ENV=production \
              NEXT_TELEMETRY_DISABLED=1 \
              PORT=3000 \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              REDIS_URL="${{ secrets.REDIS_URL }}" \
              NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          
        else
          echo "ÔøΩÔ∏è Container app doesn't exist, creating..."
          
          # First, ensure the container app environment exists
          if ! az containerapp env show --name ${{ env.CONTAINER_APP_ENVIRONMENT }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "üåç Creating container app environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location "Central India"
          fi
          
          # Create the container app
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
            --image $IMAGE_TAG \
            --min-replicas 1 \
            --max-replicas 5 \
            --cpu 0.75 \
            --memory 1.5Gi \
            --env-vars \
              NODE_ENV=production \
              NEXT_TELEMETRY_DISABLED=1 \
              PORT=3000 \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              REDIS_URL="${{ secrets.REDIS_URL }}" \
              NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
              NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --ingress external \
            --target-port 3000 \
            --transport http
        fi
        
        echo "üåê Ensuring ingress is configured..."
        # Configure ingress (will succeed even if already configured)
        az containerapp ingress enable \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --type external \
          --target-port 3000 \
          --transport http || echo "Ingress already configured"
        
        echo "‚úÖ Deployment completed"

    - name: üîÑ Run database migrations
      if: github.ref == 'refs/heads/main'
      run: |
        # Get ACR credentials for temporary container
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" --output tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" --output tsv)
        
        # Run migrations in a temporary container
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name migration-job-$(date +%s) \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --command-line "npm run db:migrate" \
          --environment-variables \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --restart-policy Never \
          --no-wait

    - name: üìä Get deployment URL
      if: github.ref == 'refs/heads/main'
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "üéâ Application deployed successfully!"
        echo "üåê URL: https://$APP_URL"
        echo "::notice title=Deployment Success::Application is live at https://$APP_URL"

    - name: üîç Validate deployment health
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the application URL
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        if [ -z "$APP_URL" ]; then
          echo "‚ùå Failed to get application URL"
          exit 1
        fi
        
        # Wait for the app to be ready
        echo "‚è≥ Waiting for application to be ready..."
        for i in {1..30}; do
          if curl -f -s "https://$APP_URL/api/health" > /dev/null; then
            echo "‚úÖ Application health check passed"
            break
          fi
          echo "‚è≥ Attempt $i/30: Waiting for application to respond..."
          sleep 10
        done
        
        # Final health check
        HEALTH_RESPONSE=$(curl -f -s "https://$APP_URL/api/health" || echo "failed")
        if [ "$HEALTH_RESPONSE" = "failed" ]; then
          echo "‚ùå Health check failed after 5 minutes"
          exit 1
        fi
        
        echo "‚úÖ Deployment validation successful"
        echo "ü©∫ Health check response: $HEALTH_RESPONSE"

    - name: üßπ Cleanup migration container
      if: github.ref == 'refs/heads/main'
      continue-on-error: true
      run: |
        # Clean up migration containers (keep only latest 3)
        MIGRATION_CONTAINERS=$(az container list \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?starts_with(name, 'migration-job-')].name" \
          --output tsv | sort -r)
        
        if [ -n "$MIGRATION_CONTAINERS" ]; then
          echo "$MIGRATION_CONTAINERS" | tail -n +4 | while read container_name; do
            if [ -n "$container_name" ]; then
              echo "üßπ Cleaning up old migration container: $container_name"
              az container delete \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --name "$container_name" \
                --yes \
                --no-wait || echo "Failed to delete $container_name (may already be deleted)"
            fi
          done
        else
          echo "üÜï No migration containers to clean up"
        fi
